@using JSNLog.TestSite.Logic

<h2>JSTests</h2>

@Html.Raw(JSNLog.TestSite.Logic.TestUtils.SetupTest(
"235.1.99.12", "id123",
@"
<jsnlog productionLibraryPath=""~/scripts/libs/jsnlog.js"">
    <ajaxAppender url=""http://dummy.com/da1"" name=""da1"" />
    <logger name="""" appenders=""da1"" />

    <ajaxAppender url=""http://dummy.com/da2"" name=""da2"" level=""ERROR"" />
    <logger name=""l2"" appenders=""da2"" level=""WARN"" />

    <logger name=""x2"" level=""INFO"" /> <!-- inherits appender from root -->

    <!-- batch size -->

    <ajaxAppender url=""http://dummy.com/da10"" name=""da10"" batchSize=""3"" />
    <logger name=""l10"" appenders=""da10"" level=""WARN"" />

    <!-- IP filtering -->

    <ajaxAppender url=""http://dummy.com/da20"" name=""da20"" ipRegex=""1\.98"" /><!--never matches-->
    <ajaxAppender url=""http://dummy.com/da21"" name=""da21"" ipRegex=""1\.99"" />

    <logger name=""l20b"" appenders=""da20"" />
    <logger name=""l20c"" appenders=""da21"" />

    <logger name=""l21a"" appenders=""da1"" ipRegex=""1\.98"" />
    <logger name=""l21b"" appenders=""da20"" ipRegex=""1\.98"" />
    <logger name=""l21c"" appenders=""da21"" ipRegex=""1\.98"" />

    <logger name=""l22a"" appenders=""da1"" ipRegex=""1\.99"" />
    <logger name=""l22b"" appenders=""da20"" ipRegex=""1\.99"" />
    <logger name=""l22c"" appenders=""da21"" ipRegex=""1\.99"" />

    <!-- User Agent filtering. The tests are run in Chrome -->

    <ajaxAppender url=""http://dummy.com/da30"" name=""da30"" userAgentRegex=""Unknown Browser"" /><!--never matches-->
    <ajaxAppender url=""http://dummy.com/da31"" name=""da31"" userAgentRegex=""Chrome"" />

    <logger name=""l30b"" appenders=""da30"" />
    <logger name=""l30c"" appenders=""da31"" />

    <logger name=""l31a"" appenders=""da1"" userAgentRegex=""Unknown Browser"" />
    <logger name=""l31b"" appenders=""da30"" userAgentRegex=""Unknown Browser"" />
    <logger name=""l31c"" appenders=""da31"" userAgentRegex=""Unknown Browser"" />

    <logger name=""l32a"" appenders=""da1"" userAgentRegex=""Chrome"" />
    <logger name=""l32b"" appenders=""da30"" userAgentRegex=""Chrome"" />
    <logger name=""l32c"" appenders=""da31"" userAgentRegex=""Chrome"" />

    <!-- Buffer tests -->

    <ajaxAppender url=""http://dummy.com/da40"" name=""da40"" storeInBufferLevel=""2000"" level=""3000"" sendWithBufferLevel=""4000"" bufferSize=""2""/>
    <logger name=""l40"" appenders=""da40"" level=""1000"" />

    <ajaxAppender url=""http://dummy.com/da41"" name=""da41"" storeInBufferLevel=""DEBUG"" level=""INFO"" sendWithBufferLevel=""WARN"" bufferSize=""2"" batchSize=""3""/>
    <logger name=""l41"" appenders=""da41"" level=""TRACE"" />

    <!-- Appender tests -->

    <ajaxAppender url=""http://dummy.com/da51"" name=""da51"" level=""3000"" />
    <ajaxAppender url=""http://dummy.com/da52"" name=""da52"" level=""4000"" />
    <logger name=""l50"" appenders=""da51;da52"" /> <!-- 2 appenders -->

    <logger name=""l51"" appenders="""" /> <!-- no appenders -->

    <!-- Testing ALL and OFF -->

    <ajaxAppender url=""http://dummy.com/da60"" name=""da60"" level=""ALL"" />
    <logger name=""l60"" appenders=""da60"" level=""ALL"" />

    <logger name=""l61"" appenders=""da1"" level=""OFF"" />

    <!-- Stopping duplicates -->

    <!-- Logger inherit appender from root -->
    <logger name=""l100"" />

    <logger name=""l101"">
       <onceOnly regex=""msg"" />
    </logger>

    <logger name=""l102"" level=""1000"">
       <onceOnly regex=""msg"" />
       <onceOnly regex=""xyz"" />
    </logger>

    <logger name=""l103"">
       <onceOnly regex=""msg"" />
       <onceOnly regex=""x[a-z]z"" />
       <onceOnly regex=""abc"" />
    </logger>

    <logger name=""l103.x2"">
       <onceOnly regex=""msg"" />
    </logger>

    <logger name=""l103.x3"">
       <onceOnly />
    </logger>

    <!-- disallow -->

    <ajaxAppender url=""http://dummy.com/da110"" name=""da110"" disallow=""x[a-z]z"" />

    <logger name=""l110"" appenders=""da110"" />
    <logger name=""l111"" disallow=""msg"" />
    <logger name=""l111.x1"" disallow="""" />

</jsnlog>
",
new [] {
    // root logger has (default) level of Debug = 2000
    // ajaxAppender has (default) level of Trace = 1000

    // Test filtering based on level
    
    new T(header: "Test filtering based on level"),

    new T(1000, "", 0),
    new T(1500, "", 0),
    new T(2000, "", 1),
    new T(3000, "", 1),

    new T(1500, "x1", 0), // test inheritance of level from root
    new T(2000, "x1", 1),
    new T(3000, "x1", 1),

    new T(2000, "x2", 0), // x2 sets level
    new T(3000, "x2", 1),
    new T(2000, "x2.b", 0), // test inheritance from x2
    new T(3000, "x2.b", 1),
    new T(2000, "x2.b.c", 0), // test inheritance from inheritance from x2
    new T(3000, "x2.b.c", 1),

    new T(3000, "x1", 1),
    new T(3000, "x1", 1),
    new T(3000, "x1", 1),
    new T(3000, "x1", 1),
    new T(3000, "x1", 1),

    new T(checkNbr: 1, checkAppender: "da1"),
    
    // Situation where appender level is higher than logger level
    
    new T(header: "Situation where appender level is higher than logger level"),

    new T(1000, "l2", 0),
    new T(6000, "l2", 2),
    new T(1500, "l2", 0),
    new T(4000, "l2", 0),
    new T(5000, "l2", 2),
    new T(checkNbr: 2, checkAppender: "da2"),
    
    // Test Batching. Batch size is 3, so only after 3 log should the appender spit them out.
    
    new T(header: "Test Batching"),

    new T(2000, "l10", 0), // level too low.
    new T(checkNbr: 10, checkAppender: "da10"),
    new T(5000, "l10", 13),
    new T(checkNbr: 11, checkAppender: "da10"),
    new T(4000, "l10", 13),
    new T(checkNbr: 12, checkAppender: "da10"),
    new T(6000, "l10", 13),
    new T(checkNbr: 13, checkAppender: "da10"),
    new T(7000, "l10", 16),
    new T(checkNbr: 14, checkAppender: "da10"),
    new T(4000, "l10", 16),
    new T(checkNbr: 15, checkAppender: "da10"),
    new T(4000, "l10", 16),
    new T(checkNbr: 16, checkAppender: "da10"),
    
    // IP matching
    
    new T(header: "IP matching"),

    new T(4000, "l20b", 0),
    new T(checkNbr: 20, checkAppender: "da20"),

    new T(4000, "l20c", 21),
    new T(checkNbr: 21, checkAppender: "da21"),
    
    // ----------
    
    new T(4000, "l21a", 0),
    new T(4000, "l21a.a", 0),  // test inheritance
    new T(checkNbr: 22, checkAppender: "da1"),

    new T(4000, "l21b", 0),
    new T(checkNbr: 23, checkAppender: "da20"),

    new T(4000, "l21c", 0),
    new T(checkNbr: 24, checkAppender: "da21"),
    
    // ----------
    
    new T(4000, "l22a", 25),
    new T(4000, "l22a.a", 25), // test inheritance
    new T(checkNbr: 25, checkAppender: "da1"),

    new T(4000, "l22b", 0),
    new T(checkNbr: 26, checkAppender: "da20"),

    new T(4000, "l22c", 27),
    new T(checkNbr: 27, checkAppender: "da21"),
    
    // User Agent matching
    
    new T(header: "User Agent matching - these tests assume current browser is Chrome"),

    new T(4000, "l30b", 0),
    new T(checkNbr: 30, checkAppender: "da30"),

    new T(4000, "l30c", 31),
    new T(checkNbr: 31, checkAppender: "da31"),
    
    // ----------
    
    new T(4000, "l31a", 0),
    new T(4000, "l31a.a", 0), // test inheritance
    new T(checkNbr: 32, checkAppender: "da1"),

    new T(4000, "l31b", 0),
    new T(checkNbr: 33, checkAppender: "da30"),

    new T(4000, "l31c", 0),
    new T(checkNbr: 34, checkAppender: "da31"),
    
    // ----------
    
    new T(4000, "l32a", 35),
    new T(4000, "l32a.a", 35), // test inheritance
    new T(checkNbr: 35, checkAppender: "da1"),

    new T(4000, "l32b", 0),
    new T(checkNbr: 36, checkAppender: "da30"),

    new T(4000, "l32c", 37),
    new T(checkNbr: 37, checkAppender: "da31"),

    // -----------
    
    new T(header: "Buffer tests"),

    new T(2000, "l40", 0), // will be shifted out when 2 more "store only" log items arrive.
    new T(checkNbr: 40, checkAppender: "da40"),
    new T(2100, "l40", 45),
    new T(checkNbr: 41, checkAppender: "da40"),
    new T(2000, "l40", 45),
    new T(checkNbr: 42, checkAppender: "da40"),
    new T(1900, "l40", 0), // should not be stored
    new T(checkNbr: 43, checkAppender: "da40"),

    new T(3000, "l40", 44), // send only
    new T(checkNbr: 44, checkAppender: "da40"),

    new T(4000, "l40", 45), // send+send all bufffered
    new T(checkNbr: 45, checkAppender: "da40"),
    
    // ---------
    
    new T(2000, "l40", 52), // Only one store-only item received, so no shifting out when buffer too small
    new T(checkNbr: 50, checkAppender: "da40"),

    new T(3000, "l40", 51),
    new T(checkNbr: 51, checkAppender: "da40"),

    new T(4000, "l40", 52),
    new T(checkNbr: 52, checkAppender: "da40"),
    
    // ---------
    // No store-only messages, so send-only and send+send-buffered are received with empty buffer
    
    new T(3000, "l40", 53),
    new T(checkNbr: 53, checkAppender: "da40"),

    new T(4000, "l40", 54),
    new T(checkNbr: 54, checkAppender: "da40"),
    
    // ---------
    // story-only, then send-only, then send+send-buffered (to see if send-only affects the buffer)
        
    new T(2000, "l40", 63), // Only one store-only item received, so no shifting out when buffer too small
    new T(checkNbr: 60, checkAppender: "da40"),

    new T(3000, "l40", 61),
    new T(checkNbr: 61, checkAppender: "da40"),

    new T(2000, "l40", 63), // Only two store-only item received, so no shifting out when buffer too small
    new T(checkNbr: 62, checkAppender: "da40"),

    new T(4000, "l40", 63),
    new T(checkNbr: 63, checkAppender: "da40"),
    
    // ------
    // Multiple store-only and send+send-buffered items in the same batch
    
    new T(2000, "l41", 67),
    new T(checkNbr: 64, checkAppender: "da41"),

    new T(4000, "l41", 67),
    new T(checkNbr: 65, checkAppender: "da41"),

    new T(2000, "l41", 67),
    new T(checkNbr: 66, checkAppender: "da41"),

    new T(4000, "l41", 67),
    new T(checkNbr: 67, checkAppender: "da41"),
    
    // -------------------------
    // Multiple appenders / no appenders    
    
    new T(header: "Multiple appenders"),

    new T(2000, "l50", 0),
    new T(2000, "l50.a", 0),
    new T(checkNbr: 70, checkAppender: "da51"),
    new T(checkNbr: 70, checkAppender: "da52"),

    new T(3000, "l50", 71),
    new T(3000, "l50.a", 71),
    new T(checkNbr: 71, checkAppender: "da51"),
    new T(checkNbr: 72, checkAppender: "da52"),

    new T(4000, "l50", 73),
    new T(4000, "l50.a", 73),
    new T(checkNbr: 73, checkAppender: "da51"),
    new T(checkNbr: 73, checkAppender: "da52"),

    // No appenders 
        
    new T(header: "No appenders"),

    new T(4000, "l51", 0),
    new T(checkNbr: 74, checkAppender: "da51"),
    new T(checkNbr: 74, checkAppender: "da52"),
    new T(checkNbr: 74, checkAppender: "da1"),

    // ----------------------------
    // ALL level 
        
    new T(header: "ALL level"),

    new T(0, "l60", 80),
    new T(6000, "l60", 80),
    new T(checkNbr: 80, checkAppender: "da60"),

    // ----------------------------
    // OFF level 
        
    new T(header: "OFF level"),

    new T(0, "l61", 0),
    new T(6000, "l61", 0),
    new T(checkNbr: 81, checkAppender: "da1"),

    // ---------------------
        
    new T(header: "Passing objects and functions"),

    new T(3000, "", 91, logObject: "\"string\"", expectedMsg: "string"),
    new T(3000, "", 91, logObject: "new String(\"string object\")", expectedMsg: "string object"),
    new T(3000, "", 91, logObject: "121", expectedMsg: "121"),
    new T(3000, "", 91, logObject: "new Number(124)", expectedMsg: "124"),
    new T(3000, "", 91, logObject: "true", expectedMsg: "true"),
    new T(3000, "", 91, logObject: "new Boolean(false)", expectedMsg: "false"),
    new T(3000, "", 91, logObject: "undefined", expectedMsg: "undefined"),
    new T(3000, "", 91, logObject: "new Date(Date.UTC(2013,10,26,22,59,45,11))", expectedMsg: "\"2013-11-26T22:59:45.011Z\""),
    new T(3000, "", 91, logObject: "/[abc]*/", expectedMsg: "/[abc]*/"),
    new T(3000, "", 91, logObject: "[ \"a\", \"b\"]", expectedMsg: "[\"a\",\"b\"]"),
    new T(3000, "", 91, logObject: "{\"f1\": \"v1\", \"f2\": \"v2\"}", expectedMsg: "{\"f1\":\"v1\",\"f2\":\"v2\"}"),
    new T(3000, "", 91, logObject: "null", expectedMsg: "null"),
    new T(3000, "", 91, logObject: "function() { return \"funcreturn\"; }", expectedMsg: "funcreturn"),
    new T(3000, "", 91, logObject: "function() { return {\"f1\": \"v1a\", \"f2\": \"v2a\"}; }", expectedMsg: "{\"f1\":\"v1a\",\"f2\":\"v2a\"}"),
    new T(3000, "", 91, logObject: "function() { return function() { return {\"f1\": \"v1b\", \"f2\": \"v2b\"}; }; }", expectedMsg: "unknown"),

    new T(checkNbr: 91, checkAppender: "da1"),
    
    // ---------------------
        
    new T(header: "Stopping duplicates"),

    new T(3000, "l100", 100, logObject: "\"abc\"", expectedMsg: "abc"),
    new T(3000, "l100", 100, logObject: "\"33msg9\"", expectedMsg: "33msg9"),
    new T(3000, "l100", 100, logObject: "\"xyz\"", expectedMsg: "xyz"),
    new T(3000, "l100", 100, logObject: "{ \"f1\": \"abc\" }", expectedMsg: "{\"f1\":\"abc\"}"),
    new T(3000, "l100", 100, logObject: "function() { return \"msg\"; }", expectedMsg: "msg"),
    new T(3000, "l100", 100, logObject: "[ \"xyz\", \"zyx\"]", expectedMsg: "[\"xyz\",\"zyx\"]"),
    new T(3000, "l100", 100, logObject: "\"abc\"", expectedMsg: "abc"),
    new T(3000, "l100", 100, logObject: "\"msg 10\"", expectedMsg: "msg 10"),
    new T(3000, "l100", 100, logObject: "\"xyz\"", expectedMsg: "xyz"),
    new T(checkNbr: 100, checkAppender: "da1"),

    new T(3000, "l101", 101, logObject: "\"abc\"", expectedMsg: "abc"),
    new T(3000, "l101", 101, logObject: "\"33msg9\"", expectedMsg: "33msg9"),
    new T(3000, "l101", 101, logObject: "\"xyz\"", expectedMsg: "xyz"),
    new T(3000, "l101", 101, logObject: "{ \"f1\": \"abc\" }", expectedMsg: "{\"f1\":\"abc\"}"),
    new T(3000, "l101", 0, logObject: "function() { return \"msg\"; }", expectedMsg: "msg"),
    new T(3000, "l101", 101, logObject: "[ \"xyz\", \"zyx\"]", expectedMsg: "[\"xyz\",\"zyx\"]"),
    new T(3000, "l101", 101, logObject: "\"abc\"", expectedMsg: "abc"),
    new T(3000, "l101", 0, logObject: "\"msg 10\"", expectedMsg: "msg 10"),
    new T(3000, "l101", 101, logObject: "\"xyz\"", expectedMsg: "xyz"),
    new T(checkNbr: 101, checkAppender: "da1"),

    new T(3000, "l102", 102, logObject: "\"abc\"", expectedMsg: "abc"),
    new T(3000, "l102", 102, logObject: "\"33msg9\"", expectedMsg: "33msg9"),
    new T(3000, "l102", 102, logObject: "\"xyz\"", expectedMsg: "xyz"),
    new T(3000, "l102", 102, logObject: "{ \"f1\": \"abc\" }", expectedMsg: "{\"f1\":\"abc\"}"),
    new T(3000, "l102", 0, logObject: "function() { return \"msg\"; }", expectedMsg: "msg"),
    new T(3000, "l102", 0, logObject: "[ \"xyz\", \"zyx\"]", expectedMsg: "[\"xyz\",\"zyx\"]"),
    new T(3000, "l102", 102, logObject: "\"abc\"", expectedMsg: "abc"),
    new T(3000, "l102", 0, logObject: "\"msg 10\"", expectedMsg: "msg 10"),
    new T(3000, "l102", 0, logObject: "\"xyz\"", expectedMsg: "xyz"),
    new T(checkNbr: 102, checkAppender: "da1"),

    new T(3000, "l103", 103, logObject: "\"abc\"", expectedMsg: "abc"),
    new T(3000, "l103", 103, logObject: "\"33msg9\"", expectedMsg: "33msg9"),
    new T(3000, "l103", 103, logObject: "\"xyz\"", expectedMsg: "xyz"),
    new T(3000, "l103", 0, logObject: "{ \"f1\": \"abc\" }", expectedMsg: "{\"f1\":\"abc\"}"),
    new T(3000, "l103", 103, logObject: "1033", expectedMsg: "1033"),
    new T(3000, "l103", 0, logObject: "function() { return \"msg\"; }", expectedMsg: "msg"),
    new T(3000, "l103", 0, logObject: "[ \"xyz\", \"zyx\"]", expectedMsg: "[\"xyz\",\"zyx\"]"),
    new T(3000, "l103", 103, logObject: "\"a-bc\"", expectedMsg: "a-bc"),
    new T(3000, "l103", 0, logObject: "\"abc\"", expectedMsg: "abc"),
    new T(3000, "l103", 0, logObject: "\"msg 10\"", expectedMsg: "msg 10"),
    new T(3000, "l103", 103, logObject: "function() { return \"catdog\"; }", expectedMsg: "catdog"),
    new T(3000, "l103", 0, logObject: "\"xyz\"", expectedMsg: "xyz"),
    new T(checkNbr: 103, checkAppender: "da1"),

    // Test inheritance of onceOnly
    
    new T(3000, "l103.x", 104, logObject: "\"abc\"", expectedMsg: "abc"),
    new T(3000, "l103.x", 104, logObject: "\"33msg9\"", expectedMsg: "33msg9"),
    new T(3000, "l103.x", 104, logObject: "\"xyz\"", expectedMsg: "xyz"),
    new T(3000, "l103.x", 0, logObject: "{ \"f1\": \"abc\" }", expectedMsg: "{\"f1\":\"abc\"}"),
    new T(3000, "l103.x", 104, logObject: "1033", expectedMsg: "1033"),
    new T(3000, "l103.x", 0, logObject: "function() { return \"msg\"; }", expectedMsg: "msg"),
    new T(3000, "l103.x", 0, logObject: "[ \"xyz\", \"zyx\"]", expectedMsg: "[\"xyz\",\"zyx\"]"),
    new T(3000, "l103.x", 104, logObject: "\"a-bc\"", expectedMsg: "a-bc"),
    new T(3000, "l103.x", 0, logObject: "\"abc\"", expectedMsg: "abc"),
    new T(3000, "l103.x", 0, logObject: "\"msg 10\"", expectedMsg: "msg 10"),
    new T(3000, "l103.x", 104, logObject: "function() { return \"catdog\"; }", expectedMsg: "catdog"),
    new T(3000, "l103.x", 0, logObject: "\"xyz\"", expectedMsg: "xyz"),
    new T(checkNbr: 104, checkAppender: "da1"),
    
    // l103.x2 inherits from l103, but overrides onceOnly so only duplicates of msg are stopped
    
    new T(3000, "l103.x2", 105, logObject: "\"abc\"", expectedMsg: "abc"),
    new T(3000, "l103.x2", 105, logObject: "\"33msg9\"", expectedMsg: "33msg9"),
    new T(3000, "l103.x2", 105, logObject: "\"xyz\"", expectedMsg: "xyz"),
    new T(3000, "l103.x2", 105, logObject: "{ \"f1\": \"abc\" }", expectedMsg: "{\"f1\":\"abc\"}"),
    new T(3000, "l103.x2", 0, logObject: "function() { return \"msg\"; }", expectedMsg: "msg"),
    new T(3000, "l103.x2", 105, logObject: "[ \"xyz\", \"zyx\"]", expectedMsg: "[\"xyz\",\"zyx\"]"),
    new T(3000, "l103.x2", 105, logObject: "\"abc\"", expectedMsg: "abc"),
    new T(3000, "l103.x2", 0, logObject: "\"msg 10\"", expectedMsg: "msg 10"),
    new T(3000, "l103.x2", 105, logObject: "\"xyz\"", expectedMsg: "xyz"),
    new T(checkNbr: 105, checkAppender: "da1"),

    new T(3000, "l103.x3", 106, logObject: "\"abc\"", expectedMsg: "abc"),
    new T(3000, "l103.x3", 106, logObject: "\"33msg9\"", expectedMsg: "33msg9"),
    new T(3000, "l103.x3", 106, logObject: "\"xyz\"", expectedMsg: "xyz"),
    new T(3000, "l103.x3", 106, logObject: "{ \"f1\": \"abc\" }", expectedMsg: "{\"f1\":\"abc\"}"),
    new T(3000, "l103.x3", 106, logObject: "function() { return \"msg\"; }", expectedMsg: "msg"),
    new T(3000, "l103.x3", 106, logObject: "[ \"xyz\", \"zyx\"]", expectedMsg: "[\"xyz\",\"zyx\"]"),
    new T(3000, "l103.x3", 106, logObject: "\"abc\"", expectedMsg: "abc"),
    new T(3000, "l103.x3", 106, logObject: "\"msg 10\"", expectedMsg: "msg 10"),
    new T(3000, "l103.x3", 106, logObject: "\"xyz\"", expectedMsg: "xyz"),
    new T(checkNbr: 106, checkAppender: "da1"),
    
    // -------------
    
    new T(header: "disallow"),

    new T(3000, "l110", 0, logObject: "'123 xyz 999'", expectedMsg: "123 xyz 999"),
    new T(3000, "l110", 110, logObject: "'123 msg 999'", expectedMsg: "123 msg 999"),
    new T(checkNbr: 110, checkAppender: "da110"),

    new T(3000, "l111", 111, logObject: "'123 xyz 999'", expectedMsg: "123 xyz 999"),
    new T(3000, "l111", 0, logObject: "'123 msg 999'", expectedMsg: "123 msg 999"),
    new T(3000, "l111.x2", 111, logObject: "'123 xyz 999'", expectedMsg: "123 xyz 999"),
    new T(3000, "l111.x2", 0, logObject: "'123 msg 999'", expectedMsg: "123 msg 999"),
    new T(3000, "l111.x1", 111, logObject: "'123 xyz 999'", expectedMsg: "123 xyz 999"),
    new T(3000, "l111.x1", 111, logObject: "'123 msg 999'", expectedMsg: "123 msg 999"),
    new T(checkNbr: 111, checkAppender: "da1")
}))
