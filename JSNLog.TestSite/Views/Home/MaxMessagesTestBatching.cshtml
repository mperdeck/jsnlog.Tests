@using JSNLog.TestSite.Logic

<h2>MaxMessagesTestsBatching</h2>

<!-- 
    Test interplay between maxMessages and batching.
    Batching overrides maxMessages, in that JSNLog could send a batch with 2 messages
    even if maxMessages is 1. However, after that batch, no more messages will be sent.
    Same for buffering.
-->

@Html.Raw(JSNLog.TestSite.Logic.TestUtils.SetupTest(
"235.1.99.12", "id123",
@"
<jsnlog maxMessages=""4"">
    <ajaxAppender url=""http://dummy.com/da1"" name=""da1"" batchSize=""3"" />
    <logger name="""" appenders=""da1"" />
    <logger name=""a"" appenders=""da1"" />
    
    <ajaxAppender url=""http://dummy.com/da2"" name=""da2"" />
    <logger name=""b"" appenders=""da2"" />
    
    <ajaxAppender url=""http://dummy.com/da3"" name=""da3"" storeInBufferLevel=""2000"" level=""3000"" sendWithBufferLevel=""4000"" bufferSize=""2"" />
    <logger name=""c"" appenders=""da3"" />
</jsnlog>
",
new [] {
    new T(3000, "a", 1),    // da1's batch size is 3, so won't attempt to send yet
    new T(2000, "c", 2),    // message will be stored in buffer
    new T(3000, "", 1),     // da1's batch size is 3, so won't attempt to send yet
    new T(4000, "c", 2),    // maxMessages reached. This message will be sent, together with message stored 
                            // in buffer. Messages in the batch buffer of da1 will not yet be sent. 
    new T(3000, "b", 0),    // This will never be sent, because maxMessages reached.
    new T(3000, "a", 0),    // This will never be sent, because maxMessages reached. But da1 will notice
                            // the stranded messages in its batch buffer (stranded because maxMessages reached)
                            // and send them.
    new T(3000, "", 0),
    new T(3000, "b", 0),
    new T(4000, "c", 0),
    new T(4000, "a", 0),

    new T(checkNbr: 1, checkAppender: "da1"),
    new T(checkNbr: 2, checkAppender: "da3"),
    new T(checkNbr: 3, checkAppender: "da2")
}))


